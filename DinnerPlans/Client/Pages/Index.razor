@page "/"
@attribute [Authorize]
<PageTitle>Index</PageTitle>
   
@using DinnerPlans.Client.Services.IServices
@using DinnerPlans.Shared.DTOs
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject IAuthenticationService AuthenticationService
<MudText>Hello, doofus!</MudText>
<MudText>Put something here at some point.</MudText>
    
    
@code {
    private string Username = "Anonymous User";
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private UserDto user;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            Username = state?.User?.Identity?.Name ?? string.Empty;

            //this is auth0 user id, TODO figure out better way to integrate, this is quick test
            //TODO figure out why this is hitting twice??
            var aoId = state?.User.Claims
                  .Where(c => c.Type.Equals("sub"))
                  .Select(c => c.Value)
                  .FirstOrDefault() ?? string.Empty;
            if (!string.IsNullOrEmpty(aoId)) aoId = aoId.Substring(6);

            //test
            //var ut = state.User;
            //var cl = ut.Claims.ToList();
            //var cls = cl.Select(a => a.Value).ToList();
            //var idd = ut.Identities.ToList();

            //var aoId = "652960eaa814c73298694868";

           
            
            var name = state?.User.Claims
                  .Where(c => c.Type.Equals("name"))
                  .Select(c => c.Value)
                  .FirstOrDefault() ?? string.Empty;

            var clientlocal = ClientFactory.CreateClient("ServerAPI");
            var resp = await clientlocal.GetStringAsync($"api/Main/user/{aoId}");
            if (string.IsNullOrEmpty(resp))
            {
                user = new UserDto { AoId = aoId, Name = name };
                var json = JsonConvert.SerializeObject(user);
                var stringContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                var resp2 = await clientlocal.PostAsync("api/Main/user/create", stringContent);
                resp = (await resp2.Content.ReadAsStringAsync());
            }
            user = JsonConvert.DeserializeObject<UserDto>(resp);
            if(user !=null) AuthenticationService.SetUser(user);
        }
        await base.OnInitializedAsync();
    }
}

